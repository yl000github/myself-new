<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.0.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
						http://www.springframework.org/schema/task 
						http://www.springframework.org/schema/task/spring-task-4.0.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">

	<!-- 自动扫描 -->
	<context:component-scan base-package="dao" />
	<context:component-scan base-package="domain.mapper" />
	<context:component-scan base-package="service.impl" />
	<!--      当Spring容器启动完成后执行下面的这个Bean -->
    <bean class="listener.Listener"/>
	
	<!-- 声明使用调度驱动 -->
	<task:annotation-driven/>

	<!-- 分散配置 -->
	<context:property-placeholder location="classpath:dbcpconfig.properties" />
	
	<!-- 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${mysql.jdbc.driver}" />
		<property name="jdbcUrl" value="${mysql.jdbc.url}"></property>
		<property name="user" value="${mysql.jdbc.username}" />
		<property name="password" value="${mysql.jdbc.password}" />
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
        <property name="minPoolSize" value="${c3p0.minPoolSize}" />
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
        <property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
        <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
        <property name="preferredTestQuery" value="${c3p0.preferredTestQuery}" />
        <property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}" />
        <property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}" />
        <property name="maxStatementsPerConnection" value="${c3p0.maxStatementsPerConnection}" />
        <property name="numHelperThreads" value="${c3p0.numHelperThreads}" />
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 可通过注解控制事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 事务通知 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- propagation,传播行为;isolation,隔离级别;rollback-for,回滚规则 -->
			<tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable"/>
			<tx:method name="updae*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable"/>
			<tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable"/>
			<tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable" read-only="true" />
			<tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable" read-only="true" />
			<tx:method name="select*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Throwable"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<!-- com.allinpay.zj.proper.service包内任意方法的执行 -->
		<aop:advisor pointcut="execution(* service..*.*(..))" advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
<!-- 		<property name="mapperLocations" value="classpath*:domain/mapper/*.xml" /> -->
	</bean>
	
	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="dao" />
<!-- 		<property name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
		<!--使用 sqlSessionFactoryBeanName解决配置文件占位符不能解析的问题：
			MapperScannerConigurer实际是在解析加载bean定义阶段的，
			这个时候要是设置 sqlSessionFactory的话，会导致提前初始化一些类，
			但此时PropertyPlaceholderConfigurer还没来得及替 换定义中的变量，导致把表达式当作字符串复制了 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

</beans>
